// Contact Management System
// This program manages contacts, allowing users to add, view, update, and delete contacts.
// Contacts are stored in a text file for persistence.

#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

// Define a class to represent a contact
class Contact {
public:
    string name;
    string phoneNumber;
    string email;

    // Constructor to initialize the contact
    Contact(const string& n, const string& phone, const string& e) : 
        name(n), phoneNumber(phone), email(e) {}

    // Method to display the contact information
    void display() const {
        cout << "Name: " << name << endl;
        cout << "Phone Number: " << phoneNumber << endl;
        cout << "Email: " << email << endl;
        cout << "-------------------" << endl;
    }
};

// Function to load contacts from a file into a vector
void loadContacts(vector<Contact>& contacts, const string& filename) {
    ifstream inputFile(filename);

    if (!inputFile) {
        cout << "Error opening file " << filename << endl;
        return;
    }

    string name, phoneNumber, email;
    while (getline(inputFile, name)) {
        getline(inputFile, phoneNumber);
        getline(inputFile, email);
        contacts.push_back(Contact(name, phoneNumber, email));
    }

    inputFile.close();
}

// Function to save contacts from a vector to a file
void saveContacts(const vector<Contact>& contacts, const string& filename) {
    ofstream outputFile(filename);

    if (!outputFile) {
        cout << "Error opening file " << filename << endl;
        return;
    }

    for (const auto& contact : contacts) {
        outputFile << contact.name << endl;
        outputFile << contact.phoneNumber << endl;
        outputFile << contact.email << endl;
    }

    outputFile.close();
}

int main() {
    vector<Contact> contacts;
    string filename = "contacts.txt";

    // Load existing contacts from file (if any)
    loadContacts(contacts, filename);

    int choice;
    do {
        // Display menu options
        cout << "Contact Management System" << endl;
        cout << "1. Add Contact" << endl;
        cout << "2. View Contacts" << endl;
        cout << "3. Update Contact" << endl;
        cout << "4. Delete Contact" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // clear the newline character from the buffer

        switch (choice) {
            case 1: {
                // Add new contact
                string name, phoneNumber, email;
                cout << "Enter name: ";
                getline(cin, name);
                cout << "Enter phone number: ";
                getline(cin, phoneNumber);
                cout << "Enter email: ";
                getline(cin, email);
                contacts.push_back(Contact(name, phoneNumber, email));
                saveContacts(contacts, filename);
                cout << "Contact added successfully!" << endl;
                break;
            }
            case 2: {
                // View all contacts
                cout << "Contacts:" << endl;
                for (const auto& contact : contacts) {
                    contact.display();
                }
                break;
            }
            case 3: {
                // Update contact
                int index;
                cout << "Enter index of contact to update (1-" << contacts.size() << "): ";
                cin >> index;
                cin.ignore(); // clear the newline character from the buffer

                if (index >= 1 && index <= contacts.size()) {
                    string name, phoneNumber, email;
                    cout << "Enter new name: ";
                    getline(cin, name);
                    cout << "Enter new phone number: ";
                    getline(cin, phoneNumber);
                    cout << "Enter new email: ";
                    getline(cin, email);
                    contacts[index - 1] = Contact(name, phoneNumber, email);
                    saveContacts(contacts, filename);
                    cout << "Contact updated successfully!" << endl;
                } else {
                    cout << "Invalid index!" << endl;
                }
                break;
            }
            case 4: {
                // Delete contact
                int index;
                cout << "Enter index of contact to delete (1-" << contacts.size() << "): ";
                cin >> index;
                cin.ignore(); // clear the newline character from the buffer

                if (index >= 1 && index <= contacts.size()) {
                    contacts.erase(contacts.begin() + index - 1);
                    saveContacts(contacts, filename);
                    cout << "Contact deleted successfully!" << endl;
                } else {
                    cout << "Invalid index!" << endl;
                }
                break;
            }
            case 5:
                // Exit the program
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 5);

    return 0;
}


"""
EXPLANATION OF THE CODE

The program uses a class Contact to represent each contact, storing name, phone number, and email.
loadContacts function reads contacts from a file into a vector of Contact objects.
saveContacts function saves contacts from a vector to a file.
main function provides a menu-driven interface for users to add, view, update, delete contacts, and exit the program.
"""


"""
NOTIONS COVERED

Console I/O
File I/O
Classes (for data structure)
Strings I/O
"""
