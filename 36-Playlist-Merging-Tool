// Playlist Merging Tool
// This program merges two playlists represented as vectors into a single sorted playlist.

#include <iostream>
#include <vector>
#include <algorithm> // Required for std::merge and std::inplace_merge

using namespace std;

// Function to merge two sorted playlists into a single sorted playlist
vector<int> mergePlaylists(const vector<int>& playlist1, const vector<int>& playlist2) {
    // Create a vector to store the merged playlist
    vector<int> mergedPlaylist;

    // Use std::merge to merge playlist1 and playlist2 into mergedPlaylist
    // std::merge requires both playlists to be sorted
    std::merge(playlist1.begin(), playlist1.end(), playlist2.begin(), playlist2.end(), back_inserter(mergedPlaylist));

    // Use std::inplace_merge to ensure the final merged playlist remains sorted
    std::inplace_merge(mergedPlaylist.begin(), mergedPlaylist.begin() + playlist1.size(), mergedPlaylist.end());

    // Return the sorted merged playlist
    return mergedPlaylist;
}

int main() {
    // Example playlists
    vector<int> playlist1 = {1, 3, 5, 7, 9};
    vector<int> playlist2 = {2, 4, 6, 8, 10};

    // Merge playlists
    vector<int> merged = mergePlaylists(playlist1, playlist2);

    // Output the merged playlist
    cout << "Merged Playlist:";
    for (int song : merged) {
        cout << " " << song;
    }
    cout << endl;

    return 0;
}


"""
EXPLANATION OF THE CODE

The program starts by including necessary libraries (iostream, vector, algorithm) and setting up namespaces.
The mergePlaylists function takes two sorted playlists (playlist1 and playlist2) and merges them into a single sorted playlist using std::merge.
It then uses std::inplace_merge to ensure the merged playlist remains sorted.
In the main function, example playlists (playlist1 and playlist2) are defined.
The playlists are merged using mergePlaylists and the resulting merged playlist is printed.
"""


"""
NOTIONS COVERED

STL merge operations (merge, inplace_merge)
"""
