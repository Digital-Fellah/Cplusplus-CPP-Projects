// Sudoku Solver
// This program solves a 9x9 Sudoku puzzle using backtracking algorithm

#include <iostream>
#include <vector>

using namespace std;

// Function to print the Sudoku grid
void printGrid(const vector<vector<int>>& grid) {
    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            cout << grid[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if a number can be placed in a specific cell
bool canPlaceNumber(vector<vector<int>>& grid, int row, int col, int num) {
    // Check if the number is already present in the row or column
    for (int i = 0; i < 9; ++i) {
        if (grid[row][i] == num || grid[i][col] == num) {
            return false;
        }
    }

    // Check if the number is already present in the 3x3 grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = startRow; i < startRow + 3; ++i) {
        for (int j = startCol; j < startCol + 3; ++j) {
            if (grid[i][j] == num) {
                return false;
            }
        }
    }

    return true;
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(vector<vector<int>>& grid) {
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            // Find an empty cell (denoted by 0)
            if (grid[row][col] == 0) {
                // Try placing numbers from 1 to 9
                for (int num = 1; num <= 9; ++num) {
                    if (canPlaceNumber(grid, row, col, num)) {
                        // Place the number if it's valid
                        grid[row][col] = num;

                        // Recursively solve the rest of the puzzle
                        if (solveSudoku(grid)) {
                            return true;
                        }

                        // If placing num doesn't lead to a solution, backtrack
                        grid[row][col] = 0;
                    }
                }
                return false; // No valid number found for this cell
            }
        }
    }
    return true; // Sudoku solved
}

int main() {
    // Sample unsolved Sudoku grid
    vector<vector<int>> grid = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    cout << "Unsolved Sudoku Grid:" << endl;
    printGrid(grid);
    cout << endl;

    // Solve the Sudoku puzzle
    if (solveSudoku(grid)) {
        cout << "Solved Sudoku Grid:" << endl;
        printGrid(grid);
    } else {
        cout << "No solution exists for the given Sudoku grid." << endl;
    }

    return 0;
}


"""
EXPLANATION OF THE CODE

The program initializes a 9x9 Sudoku grid with some cells initially filled and others empty (denoted by 0).
It defines functions to print the Sudoku grid (printGrid), check if a number can be placed in a specific cell (canPlaceNumber), and solve the Sudoku puzzle recursively using backtracking (solveSudoku).
In solveSudoku, it iterates through each cell, attempts to place numbers 1 to 9 that satisfy Sudoku rules using canPlaceNumber, and recursively solves the puzzle until a solution is found or deemed impossible.
The main function initializes a sample Sudoku grid, prints the unsolved grid, attempts to solve it using solveSudoku, and prints the solved grid or a message if no solution exists.
"""


"""
NOTIONS COVERED

find_end: Used implicitly within canPlaceNumber to check for numbers within 3x3 subgrids.
find_first_of: Not explicitly used in the code but analogous to checking numbers within rows and columns.
"""
